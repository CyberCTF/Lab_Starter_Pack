---
description: Docker Configuration and Build Setup
globs: ["**/docker-compose*.yml", "**/Dockerfile", "**/build/**", "**/tests/**", "**/.ctf/SCENARIO.md", "**/.ctf/FLAG.md"]
alwaysApply: true
---


## Directory Structure

```
tests/
docker-compose.yml
build/
├── docker-compose.dev.yml
├── web/ (or other service type)
│   ├── Dockerfile
│   └── src/ (application code)
├── .github/
│   └── workflows/
│       └── publish.yml
└── config/ (configuration files)
```

## Docker Compose File Structure

### Development Configuration
- **Location**: `build/docker-compose.dev.yml` (development environment)
- **Purpose**: Development with hot reload, debugging, and volume mounts
- **Usage**: Local development and testing

### Production Configuration
- **Location**: `docker-compose.yml` at **root level** (same level as `/build` and `/tests` directories)
- **Purpose**: Production-ready deployment configuration
- **Requirements**: 
  - Must mirror the development compose structure
  - Reference the same service directories in `/build`
  - Production-optimized settings (no debug mode, optimized builds)
  - Environment-specific configurations

## Configuration Requirements

### Service Configuration
- **Main Service**: Primary application container (adapt name and type based on project)
- **Database Service**: Data persistence (if needed by project context)
- **Port Mapping**: Expose necessary ports (adapt based on application requirements)
- **Environment Variables**: Configuration management (adapt based on project needs)
- **Volume Mounts**: Data persistence and development (adapt paths based on project structure)

### Health Checks
- **Main Service**: Appropriate health check endpoint (adapt based on service type)
- **Database**: Connection validation (if database is used)
- **Interval**: 30 seconds (adjust based on application requirements)
- **Timeout**: 10 seconds (adjust based on application response time)
- **Retries**: 3 attempts (adjust based on reliability requirements)

### Security Considerations
- **Non-root User**: Run containers as non-root (adapt user creation based on base image)
- **Resource Limits**: Set memory and CPU limits (adapt based on application requirements)
- **Network Isolation**: Use custom networks (adapt based on service communication needs)
- **Secret Management**: Use Docker secrets for sensitive data (adapt based on security requirements)

### Development Features
- **Hot Reload**: Source code changes trigger automatic rebuilds (adapt based on technology stack)
- **Volume Mounts**: Local source code mounted into container (adapt paths based on project structure)
- **Debug Mode**: Enhanced logging and error reporting (adapt based on debugging needs)
- **Database Access**: Direct database port exposure for debugging (if database is used)
- **Development Tools**: Additional debugging and development utilities (adapt based on technology stack)

## Docker Hub Integration
- **Image Repository**: Adapt based on project context and organization
- **Tagging Strategy**: Adapt based on deployment requirements
- **Automated Builds**: Configure based on CI/CD pipeline
- **Multi-architecture**: Support for different platforms (adapt based on target platforms)

## Context Adaptation Guidelines

### Technology Stack Detection
- **Analyze project files** to determine the appropriate technology stack
- **Adapt Dockerfile** based on detected language/framework (Node.js, Python, PHP, etc.)
- **Configure dependencies** based on detected package managers (npm, pip, composer, etc.)
- **Set appropriate base images** based on technology requirements

### Project Structure Adaptation
- **Service naming** should reflect the actual project purpose
- **Port configuration** should match the application's actual ports
- **Volume mounts** should align with the project's directory structure
- **Environment variables** should be relevant to the specific application

### Database Integration
- **Include database service** only if the project requires data persistence
- **Configure appropriate database** based on project requirements (MySQL, PostgreSQL, MongoDB, etc.)
- **Set up proper database credentials** and connection strings
- **Configure database volumes** for data persistence

### Security Adaptation
- **User permissions** should be appropriate for the application type
- **Resource limits** should be based on actual application requirements
- **Network configuration** should support the application's communication needs
- **Secret management** should handle the specific sensitive data of the project