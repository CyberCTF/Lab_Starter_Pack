---
description: Documentation Standards and README Guidelines
globs: ["**/README.md", "**/*.md", "**/docs/**"]
alwaysApply: false
---

# Documentation Standards and README Guidelines

## README Structure

The README.md serves as the main lab documentation and should provide comprehensive information for users to understand, run, and contribute to the lab.

### Required Sections

```markdown
# Lab Name

## Scenario
Brief description of the vulnerability and its context

## Lab Overview
- What the lab demonstrates
- Learning objectives
- Target audience

## Objectives
- Primary learning goals
- Skills to be developed
- Knowledge areas covered

## Prerequisites
- Required knowledge
- Tools needed
- System requirements

## Installation & Setup
### Local Development
1. Clone the repository
2. Navigate to the lab directory
3. Run `docker-compose up -d`
4. Access the lab at the provided URL

### Quick Start
```bash
git clone <repository-url>
cd <lab-directory>
docker-compose up -d
```

## Access
- **URL**: http://localhost:8080
- **Alternative**: http://127.0.0.1:8080
- **Port**: Specify the exact port used

## Lab Structure
```
lab-directory/
├── README.md           # This file
├── docker-compose.yml  # Production setup
├── tests/              # Validation tests
└── build/              # Docker configuration
    ├── docker-compose.dev.yml  # Development setup
    └── web/            # Service-specific Dockerfile
        └── Dockerfile
```

## Exploitation Steps
1. **Reconnaissance**: Initial assessment
2. **Vulnerability Discovery**: Finding the issue
3. **Exploitation**: Taking advantage of the vulnerability
4. **Proof of Concept**: Demonstrating the impact

## Skills Learned
- Specific vulnerability type
- Exploitation techniques
- Security assessment methodology
- Tool usage and configuration

## Contribute
- How to report issues
- How to suggest improvements
- How to submit pull requests
- Contact information
```

### Content Guidelines
- **Clear and Concise**: Use simple language, avoid jargon
- **Step-by-step**: Provide detailed instructions
- **Complete**: Include all necessary information
- **Accurate**: Ensure all commands and URLs work
- **Professional**: Maintain a professional tone throughout

## Documentation Standards

### Writing Style
- **Professional Tone**: Use business-appropriate language
- **Technical Accuracy**: Ensure all technical information is correct
- **Consistency**: Maintain consistent formatting and terminology
- **Clarity**: Write for the target audience's skill level

### Structure Guidelines
- **Logical Flow**: Organize information in a logical sequence
- **Hierarchical Headers**: Use proper markdown header hierarchy
- **Code Blocks**: Format code examples properly with syntax highlighting
- **Links**: Use descriptive link text and verify all links work

### Content Requirements
- **No Educational Warnings**: Remove all CTF-style warnings
- **Realistic Context**: Present labs as real business applications
- **Professional Appearance**: Maintain corporate documentation standards
- **Complete Information**: Include all necessary setup and usage details

### Quality Assurance

#### Content Validation
- [ ] No educational warnings present
- [ ] No vulnerability indicators
- [ ] Professional tone maintained
- [ ] Real-world appearance
- [ ] No CTF-style language

#### Technical Validation
- [ ] All commands work correctly
- [ ] URLs are accessible
- [ ] Code examples are functional
- [ ] Installation instructions are complete
- [ ] Troubleshooting information is provided

#### User Experience
- [ ] Clear navigation structure
- [ ] Easy to follow instructions
- [ ] Professional appearance
- [ ] Complete information provided
- [ ] Appropriate difficulty level