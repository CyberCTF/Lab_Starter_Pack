---
description: Testing Framework and Validation
globs: ["**/test*.py", "**/tests/**", "**/pytest.ini", "**/conftest.py"]
alwaysApply: true
---

# Testing Framework and Validation

## Test Requirements

Create comprehensive pytest tests to validate the lab functionality and ensure it works correctly throughout all exploitation steps.

### Test Coverage
- **End-to-End Validation**: Ensure the complete exploitation path works
- **Step-by-Step Verification**: Validate each individual step of the exploitation
- **Vulnerability Confirmation**: Verify the vulnerability exists and is exploitable
- **Flag Extraction**: Confirm the flag can be obtained through exploitation
- **Environment Validation**: Ensure the lab environment is properly configured

### Test Structure

#### Test Categories
- **Environment Tests**: Lab accessibility, service availability, port configuration
- **Vulnerability Tests**: Vulnerability presence verification, exploitation path validation
- **Exploitation Tests**: Step-by-step exploitation, flag extraction process
- **Security Tests**: No unintended vulnerabilities, proper isolation

#### Test Requirements
- **Comprehensive Coverage**: All exploitation steps must be tested
- **Deterministic Results**: Tests must be repeatable and reliable
- **Clear Assertions**: Test names and assertions should be self-documenting
- **Maintainable**: Easy to update when lab changes


### Test Execution
- **Run all tests**: Execute complete test suite
- **Specific test categories**: Run individual test categories as needed
- **Coverage reporting**: Generate test coverage reports
- **Verbose output**: Detailed test execution information

### Test Retry and Error Correction

#### Configuration (ZERO hardcoded values)
- Retry delay: Configurable via `RETRY_DELAY` environment variable (in seconds, defaults to 30 if not set)
- Infinite retries: Tests run until they pass (no limit)
- Clear display of retry count (e.g., "X tries used")

#### Recursive Implementation
- **Infinite Retry Logic**: Tests run recursively until they pass
- **Environment Configuration**: Retry delay configurable via `RETRY_DELAY` variable
- **Error Analysis**: Automatic error correction between retry attempts
- **Status Tracking**: Clear display of retry count and test status
- **No Hardcoded Values**: All configuration from environment variables

#### Key behaviors
- Infinite recursive retry implementation (no loops, no limits)
- All configuration from environment variables
- ZERO hardcoded values (no retry limits, no delays)
- Tests run until they pass
- Automatic error correction between attempts
- Status tracking: "PASSED" with retry count
- Clear display: "Tests passed after X attempts"

#### Configuration Examples
- **Retry delay configuration**: Set `RETRY_DELAY` environment variable (optional - defaults to 30 seconds)
- **Inline configuration**: Set environment variable inline with test execution
- **Default behavior**: Run without configuration (uses default 30s delay)

#### How It Works
- **No Environment Variable Set**: Uses default 30-second delay between retries
- **Environment Variable Set**: Uses the specified delay value
- **Infinite Retries**: Tests continue running until they pass, regardless of how many attempts
- **Automatic Error Correction**: System attempts to fix common issues between retries
- **Clear Progress**: Shows current attempt number and retry status

### Requirements
- **Comprehensive**: Cover all exploitation steps
- **Reliable**: Tests must be deterministic and repeatable
- **Configurable Performance**: Test suite execution time configurable via environment variables
- **Clear**: Test names and assertions should be self-documenting
- **Maintainable**: Easy to update when lab changes

### Quality Assurance

#### Automated Testing
- **CI/CD Integration**: Tests run automatically on code changes
- **Multiple Environments**: Testing on different operating systems
- **Performance Monitoring**: Response time and resource usage tracking
- **Security Scanning**: Vulnerability scanning of containers and code

#### Manual Testing
- **User Journey**: Complete walkthrough from start to finish
- **Edge Cases**: Testing unusual inputs and scenarios
- **Error Scenarios**: Testing error conditions and recovery
- **Documentation Review**: Verifying all instructions are accurate