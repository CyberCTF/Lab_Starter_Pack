---
description: The lab production workflow with explicit split: Review (assessment-only) followed by Correction (apply fixes)
alwaysApply: false
---

# Lab Production Workflow

The lab production workflow is in 5 phases : 
1. Context creation
2. Lab Generation
3. Review (assessment-only)
4. Correction (optional)
5. Metadata generation

## Phase 1 - Context creation

Purpose: collect and validate the library page (source of truth) and any author-provided overrides before generation.

**Rules:** `.cursor/rules/context/`

**Input:** `.ctf/LIBRARY_PAGE.md`

**Output:** `.ctf/context/SCENARIO.md` + `.ctf/context/FLAG.md`

## Phase 2 - Lab Generation

Purpose: Develop and structure a complete lab using the rules as guidelines.

**Rules:** `.cursor/rules/apps/development/` + `.cursor/rules/apps/run/`

**Input:** `.ctf/LIBRARY_PAGE.md` + `.ctf/context/SCENARIO.md` + `.ctf/context/FLAG.md`

**Output:** `build/` + `tests/` (folders containing the lab and the associated tests), + `.ctf/LAB_CREATION_LOG.md`

All generated files must follow the PHILOSOPHY constraints.

## Phase 3 - Review (assessment-only)

Purpose: automated QA and human review step to assess safety and quality before corrections.

**Rules:** `.cursor/rules/apps/review/`

**Input:** `build/` + `test/` (folders containing the lab and the associated tests) + `.ctf/LAB_CREATION_LOG.md`

**Output:** `.ctf/REVIEW.md` (findings and recommendations) or `.ctf/GOOD.md` an empty file if the lab is working and nothing need to be change

## Phase 4 - Correction (optional)

Purpose: fix the lab and its associated tests following the findings written in `.ctf/REVIEW.md`.

**Rules:** `.cursor/rules/apps/correction/`

**Input:** `build/` + `tests/` + `.ctf/REVIEW.md`

**Output:** `build/` + `tests/` (corrected), append notes to `.ctf/CORRECTION.md`; when the lab is working, produce a `.ctf/GOOD.md` file

## Phase 5 â€” Metadata generation

Purpose: produce minimal, platform-ready metadata and hints to be used by the Cyber CTF platform and the CI/CD.

**Rules:** `.cursor/rules/deploy/metadata/`

**Input:** `build/` + `test/` + `.ctf/`

**Output:** `.ctf/metadata.json`