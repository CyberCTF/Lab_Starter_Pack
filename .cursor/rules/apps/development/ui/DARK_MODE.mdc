---
description: Enforce always-on dark theme with Tailwind class strategy and tokens
globs: ["**/app/**/*.{ts,tsx}", "**/pages/**/*.{ts,tsx}", "**/components/**/*.{ts,tsx}", "**/tailwind.config.{ts,js}"]
alwaysApply: false
---

# Dark Mode â€” Always-On Policy

## Mandate
- Dark theme is the only supported theme. No light toggle. No auto-switch via system preference.
- The application must boot with dark styles applied globally.

## Implementation Rules

### 1) Tailwind and HTML Root
- Tailwind dark mode strategy: `darkMode: "class"`.
- Apply `class="dark"` to the root HTML element at all times (SSR and client). For Next.js App Router, set it on the root layout HTML tag.

### 2) CSS Variables (shadcn-like)
- Expose the dark tokens from `COLORS.mdc`, `TYPOGRAPHY.mdc`, and `SPACING.mdc` under `:root` and `.dark` (same values in our dark-only setup) to enable Tailwind CSS variables utilities.
- Do not define or reference light tokens.

### 3) Component Usage
- All components must use Tailwind classes and reference CSS variables via `hsl(var(--token))` style patterns where relevant.
- Backgrounds must use `bg-background`, text must use `text-foreground`, borders `border-border`.

### 4) Accessibility
- Maintain WCAG 2.1 AA contrast in dark mode.
- Focus rings use `ring` colors from tokens and are visible on dark backgrounds.

### 5) Prohibited
- No light theme assets, toggles, or conditional styles.
- No dynamic theme switching at runtime.

## Verification Checklist
- [ ] Root HTML has `class="dark"` at first paint.
- [ ] `tailwind.config.ts` has `darkMode: "class"`.
- [ ] UI surfaces use `bg-background` and `text-foreground` consistently.
- [ ] No references to light tokens or `prefers-color-scheme`.
