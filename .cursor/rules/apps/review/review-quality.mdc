---
description: Quality Review and Warning Removal
globs: ["**/.ctf/**", "**/test_results/**", "**/*.html", "**/*.js"]
alwaysApply: true
---

# Quality Review and Warning Removal

## Lab Functionality Validation

**Input:** `.ctf/` directory and lab directory  
**Artefact:** `.ctf/test_results/` markdown files

Ensure everything works correctly and the lab is fully functional.

### Core Validation Requirements

#### 1. Test Suite Validation
- **Pytest Passes**: All tests must pass without errors
- **Test Coverage**: Complete test coverage of all exploitation steps
- **Regression Testing**: No regressions in existing functionality
- **Performance Testing**: Lab loads and responds within acceptable time limits

#### 2. User Experience Validation
- **No Hard Guessing**: Users should not need to guess specific URLs, usernames, or paths
- **Clear Instructions**: All necessary information should be provided in documentation
- **Logical Flow**: Exploitation steps should follow a logical progression
- **Error Handling**: Proper error messages and handling throughout

#### 3. Technical Validation
- **Docker Functionality**: Containers start and run correctly
- **Network Connectivity**: All required services are accessible
- **Database Integration**: Database connections and queries work properly
- **File System**: All required files and directories are present and accessible

#### 4. Test Retry and Correction
- **Infinite Recursive Retry**: Tests run until they pass (no retry limit)
- **Retry Delay Configuration**: Configurable via environment variables (no hardcoded values)
- **Automatic Error Analysis**: Error correction between retry attempts
- **Success Guarantee**: Tests run until they pass
- **Retry Status Display**: Clear display of retry count (e.g., "X tries used")
- **Debug Logging**: All attempts logged for debugging

## Warning Removal Requirements

Remove all educational and vulnerability warnings from lab pages. The lab should appear as a real-world application without any indication that it's intentionally vulnerable.

### Warnings to Remove

#### Educational Purpose Warnings
- "This lab is for educational purposes only"
- "Made for educational purposes"
- "Educational lab only"
- "For learning purposes"
- "Training environment"
- "Educational demonstration"

#### Vulnerability Warnings
- "Voluntarily vulnerable"
- "Intentionally vulnerable"
- "Made vulnerable for learning"
- "This application is vulnerable"
- "Contains security vulnerabilities"
- "Vulnerable by design"

#### Disclaimer Warnings
- "Do not use in production"
- "Not for production use"
- "For testing only"
- "This is a test environment"
- "Demo environment"
- "Not secure"

#### Legal Warnings
- "Use at your own risk"
- "No warranty provided"
- "Educational use only"
- "Not responsible for misuse"
- "Use responsibly"

### Professional Content Guidelines

#### Instead of Warnings, Use:
- **Professional descriptions**: "This application demonstrates..."
- **Business context**: "The system handles..."
- **Functional descriptions**: "Users can..."
- **Technical specifications**: "The application supports..."

#### Example Transformations

**Before:**
```markdown
# SQL Injection Lab
⚠️ WARNING: This lab is for educational purposes only!
This application is intentionally vulnerable to SQL injection.
Do not use in production!
```

**After:**
```markdown
# Customer Management System
A web-based customer management system that allows users to search and manage customer information.
The system provides real-time search capabilities and user management features.
```

## Help Content Guidelines

The content of the lab should not help the user find the flag or answer the questions. The lab should provide a realistic challenge without giving away the solution.

### Help Content Requirements

#### 1. No Direct Assistance
- **No Flag Hints**: Do not provide hints about where to find the flag
- **No Exploitation Guidance**: Do not explain how to exploit the vulnerability
- **No Solution Paths**: Do not outline the steps to solve the lab
- **No Answer Clues**: Do not provide clues about the expected answers

#### 2. Realistic Business Context
- **Professional Documentation**: Provide only business-relevant information
- **Functional Descriptions**: Focus on what the application does, not how it works
- **User Manuals**: Include only standard user documentation
- **API Documentation**: Provide only necessary API information

### Quality Assurance

#### Content Validation
- [ ] No educational warnings present
- [ ] No vulnerability indicators
- [ ] No security hints present
- [ ] No exploitation guidance
- [ ] Professional tone maintained
- [ ] Real-world appearance
- [ ] No CTF-style language

#### User Experience
- [ ] Lab appears as real application
- [ ] Professional interface design
- [ ] Business-appropriate content
- [ ] No learning indicators
- [ ] Seamless user experience
- [ ] Appropriate difficulty level
- [ ] No hand-holding
- [ ] Natural learning progression

### Test Results Documentation

Create markdown files in `.ctf/test_results/` documenting:

#### test_results.md
```markdown
# Lab Validation Results

## Test Summary
- **Date**: [Current Date]
- **Lab**: [Lab Name]
- **Status**: [PASS/FAIL]
- **Duration**: [Test Duration]

## Test Results
### Environment Tests
- [ ] Docker containers: PASS/FAIL
- [ ] Network connectivity: PASS/FAIL
- [ ] Database access: PASS/FAIL

### Exploitation Tests
- [ ] Vulnerability discovery: PASS/FAIL
- [ ] Exploitation execution: PASS/FAIL
- [ ] Flag extraction: PASS/FAIL

### User Experience Tests
- [ ] Documentation clarity: PASS/FAIL
- [ ] Instruction accuracy: PASS/FAIL
- [ ] Error handling: PASS/FAIL

## Issues Found
[List any issues discovered during testing]

## Recommendations
[Suggestions for improvement]
```