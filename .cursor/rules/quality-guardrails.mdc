---
description: Global Quality Guardrails â€” Prevent Common Pitfalls Across All Labs
globs: ["**/Dockerfile", "**/docker-compose*.yml", "**/*.sh", "**/*.bash", "**/*.php", "**/*.js", "**/*.ts", "**/*.py", "**/tests/**", "**/pytest.ini", "**/conftest.py", ".github/workflows/**"]
alwaysApply: true
---

# Quality Guardrails (Applicable to All Labs)

These rules centralize common pitfalls and impose cross-cutting safeguards. They are prescriptive, without hardcoding, and driven by environment variables.

## CRITICAL ERRORS QUICK REFERENCE

### Top 7 Docker Errors to AVOID

1. **Wrong Package Manager** (`apt-get` on Oracle Linux)
   - Error: `apt-get: command not found`
   - Solution: Use `microdnf` for MySQL/Oracle Linux images
   - See: [Base Images and Package Managers](#base-images-and-package-managers)

2. **Obsolete Package** (`libmysqlclient-dev`)
   - Error: `Package 'libmysqlclient-dev' has no installation candidate`
   - Solution: Use `libmariadb-dev` on recent Debian
   - See: [Common Dockerfile Errors](#common-dockerfile-errors)

3. **Special Characters in Passwords** (#, @)
   - Error: YAML parsing error, `#` interpreted as comment
   - Solution: Use quoted syntax: `MYSQL_PASS: "value#with@chars"`
   - See: [Docker Compose Environment Variables](#docker-compose-environment-variables)

4. **Apache Not Listening on Custom Port**
   - Error: Healthcheck fails, connection refused
   - Solution: Add `Listen 3206` in ports.conf and VirtualHost config
   - See: [Apache and Nginx Port Configuration](#apache-and-nginx-port-configuration)

5. **Database User Not Created**
   - Error: `Access denied for user 'app_user'@'localhost'`
   - Solution: Always CREATE USER before GRANT privileges
   - See: [Database User Creation](#database-user-creation)

6. **MySQL CREATE FUNCTION Privilege Error**
   - Error: MySQL syntax error with `CREATE FUNCTION` on database-specific grants
   - Solution: Use `CREATE ROUTINE` instead of `CREATE FUNCTION` for database-level privileges
   - See: [Database Privilege Errors](#database-privilege-errors)

7. **MySQL Privilege Mixing Error**
   - Error: `ERROR 1221 (HY000): Incorrect usage of DB GRANT and GLOBAL PRIVILEGES`
   - Solution: Separate database-specific and global privileges into different GRANT statements
   - See: [MySQL Privilege Separation Error](#mysql-privilege-separation-error)

---

## Base Images and Package Managers
- Package manager MUST match the base image:
  - Debian/Ubuntu: `apt-get`
  - Alpine: `apk`
  - RHEL/Oracle: `microdnf`/`dnf`
- Do not assume `apt-get` by default.
- **Common Error**: `apt-get: command not found` on Oracle Linux images
- **Solution**: Use `microdnf` for MySQL/Oracle Linux images, `yum` for CentOS/RHEL
- **Package Name Differences**: `g++` (Debian) vs `gcc-c++` (Oracle Linux)

### Image Base OS Reference Table
| Docker Image | Base OS | Package Manager | Cleanup Command |
|--------------|---------|-----------------|-----------------|
| `mysql:8.0` | Oracle Linux | `microdnf` | `microdnf clean all` |
| `mariadb:10.x` | Debian | `apt-get` | `rm -rf /var/lib/apt/lists/*` |
| `php:8.1-apache` | Debian | `apt-get` | `rm -rf /var/lib/apt/lists/*` |
| `node:18-alpine` | Alpine Linux | `apk` | Built-in (no cleanup needed) |
| `python:3.11-slim` | Debian | `apt-get` | `rm -rf /var/lib/apt/lists/*` |
| `postgres:15` | Debian | `apt-get` | `rm -rf /var/lib/apt/lists/*` |
| `nginx:alpine` | Alpine Linux | `apk` | Built-in (no cleanup needed) |

### Dockerfile Package Manager Examples
- **MySQL Images** (`mysql:8.0` = Oracle Linux):
  ```dockerfile
  # INCORRECT - Will fail with "apt-get: command not found"
  RUN apt-get update && apt-get install -y gcc
  
  # CORRECT - Use microdnf for Oracle Linux
  RUN microdnf update && microdnf install -y \
      gcc \
      gcc-c++ \
      make \
      && microdnf clean all
  ```
- **PHP/Apache Images** (`php:8.1-apache` = Debian):
  ```dockerfile
  #  CORRECT - Use apt-get for Debian
  RUN apt-get update && apt-get install -y \
      gcc \
      g++ \
      make \
      && rm -rf /var/lib/apt/lists/*
  ```
- **Alpine Images**:
  ```dockerfile
  #  CORRECT - Use apk for Alpine
  RUN apk add --no-cache \
      gcc \
      g++ \
      make
  ```

### Mandatory Verification Before Writing Dockerfiles
**ALWAYS** check the base OS before writing installation commands:
1. **Quick Check**: `docker run --rm image_name cat /etc/os-release`
2. **Example**: `docker run --rm mysql:8.0 cat /etc/os-release`
3. **Interpret Result**: Oracle Linux = microdnf, Debian = apt-get, Alpine = apk
4. **Then Write**: Use the appropriate package manager for that OS

### Common Dockerfile Errors
- **Critical Error - Wrong Package Manager**: Using `apt-get` on Oracle Linux images (e.g., `mysql:8.0`) will fail with "command not found"
  - **Always check base OS first** using `docker run --rm image_name cat /etc/os-release`
  - **Never assume** the base image uses `apt-get` without verification
- **File Recreation**: When Dockerfiles are recreated, ensure they use correct package manager for that specific base image
- **Permission Errors**: Use `chmod 755` instead of `chmod +x` for script files
- **Script Execution**: Ensure init scripts are executable and have correct permissions
- **Package Name Mismatches**: `g++` (Debian) vs `gcc-c++` (Oracle Linux) - use correct package name for the OS
- **Package Obsolete**: `libmysqlclient-dev` is obsolete on recent Debian - use `libmariadb-dev` instead
  - WRONG: `libmysqlclient-dev`
  - CORRECT: `libmariadb-dev`

## Docker Compose Environment Variables

### Special Characters in Passwords
- **ALWAYS use quoted syntax** for passwords containing special characters (`#`, `@`, `$`, `%`, `!`, `&`, etc.)
- **Never use list syntax** (`- KEY=value`) with special characters
- Use mapping syntax with quotes instead

####  INCORRECT - Will Fail
```yaml
environment:
  - MYSQL_ADMIN_PASS=FtgY#WCXnZT5@#c:    #  # interpreted as comment
  - MYSQL_ADMIN_USER=admin1274@cyberctf.fr  #  Special chars not escaped
```

####  CORRECT - Will Work
```yaml
environment:
  MYSQL_ADMIN_PASS: "FtgY#WCXnZT5@#c:"          #  Quoted value
  MYSQL_ADMIN_USER: "admin1274@cyberctf.fr"     #  Quoted value
  MYSQL_ROOT_PASSWORD: "MyPassword123"          #  Safe to quote all passwords
```

### Environment Variables Best Practices
```yaml
#  CORRECT - Always quote passwords
environment:
  MYSQL_ROOT_PASSWORD: "root_password"
  MYSQL_DATABASE: project_management  # No quotes needed if no special chars
  MYSQL_USER: app_user               # No quotes needed
  MYSQL_PASSWORD: "app_password"     # Quoted for consistency
  DB_PASS: "FtgY#WCXnZT5@#c:"        # MUST quote if special chars
```

## Apache and Nginx Port Configuration

### Critical Rule: Service Must Listen on Assigned Port
- **Healthcheck ports must match service listen ports**
- **Apache**: Must explicitly listen on the configured port (not just 80)
- **Configuration required**: Add `Listen` directive and VirtualHost configuration

#### Apache Configuration for Custom Ports

#####  INCORRECT - Apache Only Listens on Port 80
```dockerfile
RUN a2enmod rewrite
EXPOSE 3206
CMD ["apache2-foreground"]
#  Apache will only listen on port 80, healthcheck will fail
```

#####  CORRECT - Configure Apache to Listen on Custom Port
```dockerfile
# Install required packages
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libmariadb-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install mysqli pdo_mysql

# Configure Apache
RUN a2enmod rewrite
RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

#  CRITICAL: Configure Apache to listen on port 3206
RUN sed -i 's/Listen 80/Listen 80\nListen 3206/' /etc/apache2/ports.conf

# Create custom VirtualHost for port 3206
RUN echo "<VirtualHost *:3206>\n\
    DocumentRoot /var/www/html\n\
    <Directory /var/www/html>\n\
        AllowOverride All\n\
        Require all granted\n\
    </Directory>\n\
</VirtualHost>" > /etc/apache2/sites-available/000-default.conf

EXPOSE 3206
CMD ["apache2-foreground"]
```

### Port Configuration Checklist
- [ ] Apache `Listen` directive includes the custom port
- [ ] VirtualHost configuration binds to the custom port
- [ ] Docker Compose `ports` mapping matches internal port
- [ ] Healthcheck uses the correct port number
- [ ] PHP configuration listens on the correct port

## Database User Creation

### Mandatory: Create Database Users in Init Scripts
- **ALWAYS create users** before granting privileges
- **Use `IF NOT EXISTS`** to prevent errors on re-runs
- **Define users in numbered init scripts** (01-create-database.sql, etc.)

####  INCORRECT - User Not Created
```sql
--  User 'app_user' not created, GRANT will fail
GRANT SELECT, INSERT ON project_management.* TO 'app_user'@'%';
```

####  CORRECT - User Created Then Granted Privileges
```sql
--  Create database first
CREATE DATABASE IF NOT EXISTS project_management 
CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

--  Create user BEFORE granting privileges
CREATE USER IF NOT EXISTS 'app_user'@'%' IDENTIFIED BY 'app_password';

--  Then grant privileges
GRANT SELECT, INSERT, UPDATE, DELETE ON project_management.* TO 'app_user'@'%';

--  Flush privileges to apply changes
FLUSH PRIVILEGES;
```

### Database Initialization Order
1. **01-create-database.sql**: Create database
2. **02-create-users.sql**: Create users (or combine with step 1)
3. **03-grant-privileges.sql**: Grant privileges
4. **04-init-data.sql**: Initialize data
5. **Always use `IF NOT EXISTS`** to prevent errors on re-runs

## Extensions and Runtimes
- PHP: explicitly list and install required extensions (e.g., `mysqli`, `pdo_mysql`, `gd`, `zip`). Build fails if missing.
- Python: document/install toolchain if native wheels are required.
- Node: locked dependencies (lockfile) and ports via env.

## Database Connection Errors
- **Common Error**: "Database connection failed" in applications
- **Root Causes**:
  - User not created properly or missing privileges
  - Database not initialized with required tables
  - Incorrect connection parameters (host, port, credentials)
  - Privilege separation issues in MySQL
- **Prevention**:
  - Always test database connection after container startup
  - Use proper privilege separation (database vs global privileges)
  - Include `IF NOT EXISTS` in user creation scripts
  - Verify database initialization order in scripts

## Scripts and System Compliance
- All shell scripts must be LF line endings and executable (+x).
- Avoid `/bin/sh^M` errors by applying `.gitattributes` or conversion at build time if necessary.

## Database Initialization Scripts
- **Script Order**: Database creation must come before user creation and privilege grants
- **Common Error**: "Incorrect usage of DB GRANT and GLOBAL PRIVILEGES"
- **Solution**: Separate database-specific and global privileges into different GRANT statements
- **Script Naming**: Use numbered prefixes (01-, 02-, 03-) to ensure execution order
- **Error Handling**: Include `IF NOT EXISTS` clauses to prevent conflicts on re-runs

## Multi-architecture and Optimization
- Images must be multi-arch (amd64, arm64) and support Buildx.
- Use multi-stage builds and clean layers to limit size.

## Security and Permissions
- Run containers as non-root. Writable directories must be owned by the runtime user.
- No secrets should be baked into the image. Secrets provided at runtime (env/secrets/volumes).

## Network and Ports
- NO host port should be hardcoded. All exposed ports are driven by environment variables.
- Use non-standard port sequence to avoid conflicts: 3206, 3207, 3208, etc.
- Standard port assignments:
  - `WEB_PORT` (default 3206) â€” web service host port
  - `DB_HOST_PORT` (default 3207) â€” database host port
  - `API_PORT` (default 3208) â€” API service host port
  - `REDIS_PORT` (default 3209) â€” Redis host port
  - Continue sequence for additional services
- **Port Mapping**: Use same internal and external ports (3206:3206, 3207:3207, etc.)
- **Service Configuration**: Configure services to listen on their assigned internal ports (3206, 3207, 3208, etc.)
- **Port Consistency**: All services must use identical internal and external ports
  -  Incorrect: `3207:3206` (database external 3207, internal 3206)
  -  Correct: `3207:3207` (database external 3207, internal 3207)
- Services must listen on `0.0.0.0` (never only `127.0.0.1` in container).
- Avoid coupling to `host.docker.internal`. Prefer dedicated networks and environment variables.

## Docker Compose (V2)
- Do not use the `version:` key (obsolete in Compose V2).
- Mandatory dev/prod parity: services, paths and options consistent between `docker-compose.dev.yml` and `docker-compose.yml`.
- Read readiness state via healthchecks. Consumers must wait for `service_healthy` (or use a standard wait utility).

### Docker Compose Common Errors
- **Version Key Obsolete**: Remove `version: '3.8'` completely (Compose V2 doesn't need it)
- **Port Conflicts**: Check for port conflicts before deployment
  - Common conflicts: 8080, 3306, 80, 443
  - Solution: Use non-standard ports (3206, 3207, 3208, etc.)
- **Service Dependencies**: Use `depends_on` with `condition: service_healthy` for proper startup order

## Databases
- MySQL 8: standardize authentication plugin or use compatible client drivers.
- Init DB: scripts in `/docker-entrypoint-initdb.d` with correct file types/permissions.
- Explicit charset/collation (e.g., `utf8mb4` / `utf8mb4_unicode_ci`).
- MySQL privileges: Use `CREATE ROUTINE` instead of `CREATE FUNCTION` for database-specific grants.
  - WRONG: `GRANT CREATE FUNCTION ON database.* TO 'user'@'%';`
  - CORRECT: `GRANT CREATE ROUTINE ON database.* TO 'user'@'%';`
- **MySQL Privilege Separation**: Never mix database and global privileges in single GRANT statement.
  - WRONG: `GRANT SELECT, FILE ON database.* TO 'user'@'%';`
  - CORRECT: `GRANT SELECT ON database.* TO 'user'@'%'; GRANT FILE ON *.* TO 'user'@'%';`
- **User Creation**: Always use `IF NOT EXISTS` for user creation to avoid conflicts.
  - CORRECT: `CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY 'password';`

### MySQL CREATE FUNCTION Error
- **Common Error**: MySQL syntax error when using `CREATE FUNCTION` privilege on database-specific grants
- **Error Message**: `ERROR 1064 (42000): You have an error in your SQL syntax`
- **Root Cause**: MySQL does not accept `CREATE FUNCTION` on database-specific grants
- **Solution**: Use `CREATE ROUTINE` instead

#### WRONG
```sql
-- Will cause syntax error
GRANT CREATE FUNCTION ON database_name.* TO 'user'@'%';
```

#### CORRECT
```sql
-- Use CREATE ROUTINE for database-level privileges
GRANT CREATE ROUTINE ON database_name.* TO 'user'@'%';

-- Or omit the privilege entirely if not needed
GRANT SELECT, INSERT, UPDATE, DELETE ON database_name.* TO 'user'@'%';
```

### MySQL Privilege Separation Error

- **Common Error**: Mixing database-specific and global privileges in a single GRANT statement
- **Error Message**: `ERROR 1221 (HY000): Incorrect usage of DB GRANT and GLOBAL PRIVILEGES`
- **Root Cause**: MySQL does not accept mixing database-level and global-level privileges in the same GRANT statement
- **Solution**: Separate database-specific and global privileges into different GRANT statements

#### WRONG - Mixing Privileges
```sql
-- Will cause ERROR 1221: Cannot mix database and global privileges
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, FILE ON database_name.* TO 'user'@'%';
--                                                    ^^^^ FILE is a global privilege
```

#### CORRECT - Separated Privileges
```sql
-- Database-specific privileges (separate statement)
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP ON database_name.* TO 'user'@'%';
GRANT CREATE ROUTINE ON database_name.* TO 'user'@'%';

-- Global privileges (separate statement on *.*)
GRANT FILE ON *.* TO 'user'@'%';
```

### MySQL Privilege Examples
```sql
-- Database-specific privileges
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP ON database.* TO 'user'@'%';

-- Global privileges (separate statement)
GRANT FILE ON *.* TO 'user'@'%';

-- User creation with error handling
CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY 'password';
```

## Localization and Time
- Define `TZ` explicitly and ensure application/DB use expected charset/collation.

## Logging
- Structured logs (key=value/JSON) and levels configurable via environment variables.
- No error display in production (PHP). Errors must be logged.

## Tests and Robustness
- Before each test execution: perform cleanup (`docker-compose down -v`) â€” driven by environment variables (no hardcoding).
- Centralized retries/backoff 100% configurable via env (no hardcoded values).
- No hardcoded URLs/ports in tests. Use `APP_BASE_URL`, `WEB_PORT`, `DB_HOST_PORT`, etc.
- Tests must wait for readiness via healthchecks and backoff.

## CI/CD
- Validate presence of required environment variables/secrets, with explicit error messages.
- Consistent caching based on lockfiles; documented invalidation.
- Multi-platform builds enabled.

## Network Timeouts
- Critical network operations (pull/build/test) must support retries configurable via env.

## Phase Timing
- Track start/end/duration for each phase (Plan, Lab, Review, Metadata) in `.ctf/timing_logs/`. Behavior is enableable/disableable via env.

---

## Workflow: Writing Dockerfiles Safely

### Step-by-Step Verification Process

**Before writing ANY Dockerfile RUN command:**

1. **Identify the base image**: Look at the `FROM` line (e.g., `FROM mysql:8.0`)

2. **Verify the base OS**:
   ```bash
   docker run --rm mysql:8.0 cat /etc/os-release
   ```

3. **Interpret the result**:
   - If shows `ID=ol` or `Oracle Linux` â†’ Use `microdnf`
   - If shows `ID=debian` or `ID=ubuntu` â†’ Use `apt-get`
   - If shows `ID=alpine` â†’ Use `apk`

4. **Use the correct package manager**:
   - Oracle Linux: `microdnf install -y package && microdnf clean all`
   - Debian/Ubuntu: `apt-get update && apt-get install -y package && rm -rf /var/lib/apt/lists/*`
   - Alpine: `apk add --no-cache package`

5. **Verify package names**:
   - Debian: `g++`
   - Oracle Linux: `gcc-c++`

### Real-World Example

**Scenario**: Need to install GCC compiler in MySQL 8.0 image

**Step 1**: Check base OS
```bash
docker run --rm mysql:8.0 cat /etc/os-release
# Output shows: ID=ol (Oracle Linux)
```

**Step 2**: Write correct Dockerfile
```dockerfile
# WRONG (will fail):
RUN apt-get update && apt-get install -y gcc

# CORRECT:
RUN microdnf update && microdnf install -y gcc && microdnf clean all
```

---

## Standard Environment Variables (Documentation)
- `WEB_PORT` (default 3206) â€” host port for web service (internal port 3206)
- `DB_HOST_PORT` (default 3207) â€” host port for database service (internal port 3207)
- `API_PORT` (default 3208) â€” host port for API service (internal port 3208)
- `REDIS_PORT` (default 3209) â€” host port for Redis service (internal port 3209)
- `APP_BASE_URL` â€” base URL used by tests/integrations
- `CLEANUP_BEFORE_TESTS` (bool) â€” execute cleanup before tests
- `REMOVE_VOLUMES` (bool) â€” remove volumes during cleanup
- `CLEANUP_NETWORKS` (bool) â€” clean networks during cleanup
- `RETRY_DELAY`, `MAX_RETRIES` â€” retry/backoff configuration
- `ENABLE_TIMING`, `TIMING_LOG_LEVEL`, `TIMING_LOG_RETENTION_DAYS` â€” phase timing configuration
- `TZ`, `DB_CHARSET`, `DB_COLLATION` â€” localization and encoding

---

## Examples (Descriptive)
- Port mappings (host â†’ container): 
  - Web: `${WEB_PORT:-3206}:3206`
  - DB: `${DB_HOST_PORT:-3207}:3207`
  - API: `${API_PORT:-3208}:3208`
- Healthcheck: define a simple command (ping service/port), adapted interval/timeout/retries, and make consumer services depend on `service_healthy` state.
- Retry policy: delays and attempts only via env; clearly display attempt counter.

---

## COMPLETE WORKING TEMPLATES

### PHP + Apache + MySQL Template (Fully Working)

#### Dockerfile (web/Dockerfile)
```dockerfile
FROM php:8.1-apache

# Install required packages (use libmariadb-dev on recent Debian)
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libmariadb-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install mysqli pdo_mysql

# Install MySQL client for testing
RUN apt-get update && apt-get install -y default-mysql-client && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /var/www/html

# Copy application files
COPY src/ /var/www/html/

# Set proper permissions
RUN chown -R www-data:www-data /var/www/html
RUN chmod -R 755 /var/www/html

# Configure Apache
RUN a2enmod rewrite
RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

#  CRITICAL: Configure Apache to listen on port 3206
RUN sed -i 's/Listen 80/Listen 80\nListen 3206/' /etc/apache2/ports.conf

# Create custom VirtualHost for port 3206
RUN echo "<VirtualHost *:3206>\n\
    DocumentRoot /var/www/html\n\
    <Directory /var/www/html>\n\
        AllowOverride All\n\
        Require all granted\n\
    </Directory>\n\
</VirtualHost>" > /etc/apache2/sites-available/000-default.conf

EXPOSE 3206
CMD ["apache2-foreground"]
```

#### docker-compose.dev.yml
```yaml
services:
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "${WEB_PORT:-3206}:3206"
    environment:
      DB_HOST: database
      DB_PORT: "3306"
      DB_NAME: project_management
      DB_USER: app_user
      DB_PASS: app_password
      WEB_PORT: "3206"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./web/src:/var/www/html
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3206/health.php"]
      interval: 30s
      timeout: 10s
      retries: 3

  database:
    image: mysql:8.0
    ports:
      - "${DB_HOST_PORT:-3207}:3306"
    environment:
      #  CRITICAL: Use quoted syntax for passwords with special characters
      MYSQL_ROOT_PASSWORD: "root_password"
      MYSQL_DATABASE: project_management
      MYSQL_USER: app_user
      MYSQL_PASSWORD: "app_password"
      MYSQL_ADMIN_USER: "admin1274@cyberctf.fr"
      MYSQL_ADMIN_PASS: "FtgY#WCXnZT5@#c:"
      MYSQL_DATABASE_ADMIN: app_repo38
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: --secure-file-priv=/tmp --local-infile=1

volumes:
  mysql_data:

networks:
  app_network:
    driver: bridge
```

#### Database Init Script (database/init/01-create-database.sql)
```sql
-- Create database first
CREATE DATABASE IF NOT EXISTS project_management 
CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

--  CRITICAL: Create user BEFORE granting privileges
CREATE USER IF NOT EXISTS 'app_user'@'%' IDENTIFIED BY 'app_password';

-- Grant privileges
GRANT SELECT, INSERT, UPDATE, DELETE ON project_management.* TO 'app_user'@'%';

-- Flush privileges to apply changes
FLUSH PRIVILEGES;
```

###  Key Points Checklist
- [ ] Used `libmariadb-dev` (not `libmysqlclient-dev`) on Debian
- [ ] Apache configured to listen on custom port (3206)
- [ ] VirtualHost created for custom port
- [ ] Environment variables use quoted syntax for passwords
- [ ] Database users created BEFORE granting privileges
- [ ] `IF NOT EXISTS` used in all CREATE statements
- [ ] Healthchecks use correct port numbers
- [ ] Port consistency: internal port = external port (3206:3206)

---

