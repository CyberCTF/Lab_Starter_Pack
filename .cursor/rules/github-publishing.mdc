---
description: GitHub Actions and Docker Hub Publishing
globs: ["**/.github/workflows/**", "**/publish.yml", "**/ci.yml", "**/deploy.yml"]
alwaysApply: false
---

# GitHub Actions and Docker Hub Publishing

## Automated Publishing Workflow

The lab should be automatically published to Docker Hub when a commit is made to the main branch via GitHub Actions. If multiple Docker images are required, the workflow should publish all of them.

### GitHub Actions Workflow

```yaml
name: Build and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: cybergen

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ github.event.repository.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./build/web
        file: ./build/web/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push additional images
      if: contains(github.event.head_commit.message, '[multi-image]')
      run: |
        # Build additional images if needed
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ github.event.repository.name }}-db ./build/database
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ github.event.repository.name }}-db
```

### Multi-Image Support

#### Database Image
```yaml
- name: Build and push database image
  if: contains(github.event.head_commit.message, '[multi-image]')
  run: |
    docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ github.event.repository.name }}-db ./build/database
    docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ github.event.repository.name }}-db
```

#### Web Application Image
```yaml
- name: Build and push web image
  run: |
    docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ github.event.repository.name }}-web ./build/web
    docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ github.event.repository.name }}-web
```

### Workflow Requirements

#### Trigger Conditions
- **Main Branch**: Automatic trigger on push to main
- **Pull Requests**: Build and test on PR creation
- **Manual Trigger**: Allow manual workflow execution
- **Multi-image Flag**: Use commit message `[multi-image]` for additional images

#### Security Configuration
- **Docker Hub Secrets**: Store credentials securely
- **Token Permissions**: Minimal required permissions
- **Image Signing**: Sign images for security
- **Vulnerability Scanning**: Scan images for vulnerabilities

#### Build Optimization
- **Multi-platform**: Support AMD64 and ARM64
- **Layer Caching**: Use GitHub Actions cache
- **Parallel Builds**: Build multiple images simultaneously
- **Build Matrix**: Support different configurations

### Docker Hub Integration

#### Repository Structure
```
cybergen/
├── lab-sql-injection
├── lab-xss-stored
├── lab-file-upload
└── lab-xxe-internal
```

#### Tagging Strategy
- **Latest**: `cybergen/lab-name:latest`
- **Branch**: `cybergen/lab-name:main`
- **Commit**: `cybergen/lab-name:abc1234`
- **Version**: `cybergen/lab-name:v1.0.0`

#### Publishing Requirements
- **Automatic**: Triggered by GitHub commits
- **Multi-image**: Support for multiple related images
- **Versioning**: Semantic versioning support
- **Rollback**: Ability to rollback to previous versions